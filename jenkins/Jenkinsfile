pipeline {
    agent any
    parameters {
        string(name: 'VERSION', defaultValue: 'latest', description: 'Docker image version')
    }
    environment {
        REGISTRY = 'prasoonshrama25'
        IMAGE = 'cronjob-app'
        TAG = "${params.VERSION}"
        DOCKER_CREDENTIALS_ID = 'docker-credentials-id'
        KUBE_CONFIG = credentials('kubeconfig')
    }
    stages {
        stage('Install Helm') {
            steps {
                script {
                    bat '''
                        echo Installing Helm...

                        :: Download Helm installation script
                        curl -fsSL -o get_helm.bat https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3

                        :: Run the script to install Helm
                        get_helm.bat

                        :: Clean up the installation script
                        del get_helm.bat

                        :: Verify Helm installation
                        helm version
                    '''
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    bat "docker build -t ${REGISTRY}/${IMAGE}:${params.VERSION} -f Dockerfile ."
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS_ID) {
                        bat "docker push ${REGISTRY}/${IMAGE}:${params.VERSION}"
                    }
                }
            }
        }
        stage('Clean Up Existing Resources') {
            steps {
                script {
                    def namespaces = ['cronjob-v1-namespace', 'cronjob-v2-namespace', 'cronjob-v3-namespace']
                    withKubeConfig([credentialsId: 'kubeconfig']) {
                        namespaces.each { ns ->
                            bat """
                                echo Cleaning up resources in namespace ${ns}...

                                :: Delete existing Helm releases if they exist
                                helm delete cronjob-app-pvc-${ns} --namespace ${ns} || echo "No existing Helm release to delete in namespace ${ns}"

                                :: Delete existing namespace if needed
                                kubectl delete namespace ${ns} --ignore-not-found=true
                            """
                        }
                    }
                }
            }
        }
        stage('Create Namespaces and PVCs') {
            steps {
                script {
                    def namespaces = ['cronjob-v1-namespace', 'cronjob-v2-namespace', 'cronjob-v3-namespace']
                    withKubeConfig([credentialsId: 'kubeconfig']) {
                        namespaces.each { ns ->
                            bat """
                                echo Creating namespace and PVC for ${ns}...

                                :: Create the namespace
                                kubectl create namespace ${ns} --dry-run=client -o yaml | kubectl apply -f -

                                :: Deploy the PersistentVolumeClaim using Helm
                                helm upgrade --install cronjob-app-pvc-${ns} ./helm/cronjob-multi-version \
                                --namespace ${ns} \
                                --set persistentVolumeClaim.name=cronjob-app-pvc-${ns} \
                                --set persistentVolumeClaim.namespace=${ns}
                            """
                        }
                    }
                }
            }
        }
        stage('Deploy CronJobs') {
            steps {
                script {
                    def namespaces = ['cronjob-v1-namespace', 'cronjob-v2-namespace', 'cronjob-v3-namespace']
                    withKubeConfig([credentialsId: 'kubeconfig']) {
                        namespaces.each { ns ->
                            bat """
                                echo Deploying CronJobs in namespace ${ns}...

                                helm upgrade --install cronjob-app-${ns} ./helm/cronjob-multi-version \
                                --namespace ${ns} \
                                --set image.repository=${REGISTRY}/${IMAGE} \
                                --set image.tag=${VERSION} \
                                --set namespace=${ns}
                            """
                        }
                    }
                }
            }
        }
    }
}
