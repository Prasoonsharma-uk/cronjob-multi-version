pipeline {
    agent any
    parameters {
        string(name: 'VERSION', defaultValue: 'latest', description: 'Docker image version')
        string(name: 'CRON_SCHEDULE_1', defaultValue: '*/5 * * * *', description: 'Cron schedule for cronjob-v1')
        string(name: 'CRON_SCHEDULE_2', defaultValue: '*/10 * * * *', description: 'Cron schedule for cronjob-v2')
        string(name: 'CRON_SCHEDULE_3', defaultValue: '*/15 * * * *', description: 'Cron schedule for cronjob-v3')
        string(name: 'OUTPUT_PATH_1', defaultValue: 'logs/version1', description: 'Output path for cronjob-v1')
        string(name: 'OUTPUT_PATH_2', defaultValue: 'logs/version2', description: 'Output path for cronjob-v2')
        string(name: 'OUTPUT_PATH_3', defaultValue: 'logs/version3', description: 'Output path for cronjob-v3')
    }
    environment {
        REGISTRY = 'prasoonshrama25'
        IMAGE = 'cronjob-app'
        TAG = "${params.VERSION}" // Use the version parameter for tagging
        DOCKER_CREDENTIALS_ID = 'docker-credentials-id'
        KUBE_CONFIG = credentials('kubeconfig')
    }
    stages {
        stage('Install Helm') {
            steps {
                script {
                    """
                    echo Installing Helm...

                    :: Download Helm installation script
                    curl -fsSL -o get_helm.bat https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3

                    :: Make the script executable
                    chmod 700 get_helm.bat

                    :: Run the script to install Helm
                    get_helm.bat

                    :: Clean up the installation script
                    del get_helm.bat

                    :: Verify Helm installation
                    helm version
                    """
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image with the specified version
                    bat "docker build -t ${REGISTRY}/${IMAGE}:${params.VERSION} -f Dockerfile ."
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS_ID) {
                        bat "docker push ${REGISTRY}/${IMAGE}:${params.VERSION}"
                    }
                }
            }
        }
        stage('Deploy with Helm (cronjob-v1)') {
            steps {
                script {
                    withKubeConfig([credentialsId: 'kubeconfig']) {
                        """
                        echo Creating cronjob namespace...
                        kubectl create namespace cronjob || echo "Namespace cronjob already exists"

                        echo Deploying cronjob-v1 to Kubernetes...
                        helm upgrade --install cronjob-v1 ./helm/cronjob-multi-version \
                                     --namespace cronjob \
                                     --set image.repository=${REGISTRY}/${IMAGE} \
                                     --set image.tag=${VERSION} \
                                     --set schedule="{{ params.CRON_SCHEDULE_1 }}" \
                                     --set outputPath="{{ params.OUTPUT_PATH_1 }}"
                        """
                    }
                }
            }
        }
        stage('Deploy with Helm (cronjob-v2)') {
            steps {
                script {
                    withKubeConfig([credentialsId: 'kubeconfig']) {
                        """
                        echo Deploying cronjob-v2 to Kubernetes...
                        helm upgrade --install cronjob-v2 ./helm/cronjob-multi-version \
                                     --namespace cronjob \
                                     --set image.repository=${REGISTRY}/${IMAGE} \
                                     --set image.tag=${VERSION} \
                                     --set schedule="{{ params.CRON_SCHEDULE_2 }}" \
                                     --set outputPath="{{ params.OUTPUT_PATH_2 }}"
                        """
                    }
                }
            }
        }
        stage('Deploy with Helm (cronjob-v3)') {
            steps {
                script {
                    withKubeConfig([credentialsId: 'kubeconfig']) {
                        """
                        echo Deploying cronjob-v3 to Kubernetes...
                        helm upgrade --install cronjob-v3 ./helm/cronjob-multi-version \
                                     --namespace cronjob \
                                     --set image.repository=${REGISTRY}/${IMAGE} \
                                     --set image.tag=${VERSION} \
                                     --set schedule="{{ params.CRON_SCHEDULE_3 }}" \
                                     --set outputPath="{{ params.OUTPUT_PATH_3 }}"
                        """
                    }
                }
            }
        }
    }
}
